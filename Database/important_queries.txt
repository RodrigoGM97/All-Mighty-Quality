Select 
    (student.Lastnames + ', ' + student.Names) as Student_Full_Name,
    class.Class_name,
    student_class.grade,
    (teacher.Lastnames + ', ' + teacher.Names) as Teacher_Full_Name
from 
    STUDENTS student JOIN STUDENT_HAS_CLASS student_class on (student.Student_id = student_class.student_id)
    JOIN TEACHER_GIVES_CLASS teacher_class on(teacher_class.Class_id = student_class.class_id)
    JOIN TEACHERS teacher on (teacher.teacher_id = teacher_class.teacher_id)
    JOIN CLASS class on (student_class.Class_id = class.class_id)


-- Login query:

WITH TT_LOGIN_DATABASE AS(
select
    student_id as ID,
    'Student' as Role,
    Pass as Password
from students
union
select
    teacher_id as ID,
    'Teacher' as Role,
    Pass as Password
from  teachers)
select
case when EXISTS(SELECT 
                    ROLE
                from TT_LOGIN_DATABASE
                WHERE ID = 'A01120369' and Password = 'nothing' group by ID, Role
                ) THEN 'OK'
            ELSE
            'Incorrect Login' end as Status
        ;

--PROCEDURE LOGIN

CREATE FUNCTION VALIDATE_LOGIN(
@USERNAME_R VARCHAR(100),
@PASSWORD_R VARCHAR(100))
RETURNS VARCHAR(100)
AS
BEGIN
    DECLARE @V_LOGIN VARCHAR(100);
    DECLARE @V_ROLE VARCHAR(100);

    WITH TT_LOGIN_DATABASE AS(
select
    student_id as ID,
    'Student' as Role,
    Pass as Password
from students
union
select
    teacher_id as ID,
    'Teacher' as Role,
    Pass as Password
from  teachers)
select
@V_LOGIN = (case when EXISTS(SELECT 
                    ROLE
                from TT_LOGIN_DATABASE
                WHERE ID = @USERNAME_R and Password = @PASSWORD_R group by ID, Role
                ) THEN 'OK'
            ELSE
            'Incorrect Login' end)
        ;
    IF @V_LOGIN = 'OK'
         WITH TT_LOGIN_DATABASE AS(
            select
                student_id as ID,
                'Student' as Role,
                Pass as Password
            from students
            union
            select
                teacher_id as ID,
                'Teacher' as Role,
                Pass as Password
            from  teachers) 
        SELECT 
            @V_ROLE=ROLE
            from TT_LOGIN_DATABASE
        WHERE ID = @USERNAME_R and Password = @PASSWORD_R group by ID, Role
    ELSE SELECT @V_ROLE='INCORRECT LOGIN';    
    RETURN @V_ROLE;
END

--information by group display

select 
    student.student_id as student_id, 
    student.names as Name,
    student.lastnames as "Last Name",
    cl.class_name as "Class Name", 
    student_class.Academic_grade as "Academic", 
    student_class.TeamWork_grade as "Team Work",
    student_class.Communication_grade as "Communication Skills"

from students student join student_has_class student_class on (student.student_id = student_class.student_id)
join class cl on (cl.class_id = student_class.class_id)
join TEACHER_GIVES_CLASS TEACHER_CLASS ON (CL.CLASS_ID = TEACHER_CLASS.CLASS_ID)
JOIN TEACHERS T ON (T.TEACHER_ID = TEACHER_CLASS.TEACHER_ID)
Where T.teacher_id = 'replace for teacher id' and cl.Class_name = 'Replace for class name';

--bring all groups from a given teacher:

select 
    Class_name
    from [dbo].[TEACHER_GIVES_CLASS] teacher_class join [dbo].[CLASS] class on (class.class_id = teacher_class.class_id)
     where teacher_id = 'L01246138';

--Check how many classes does a teacher give:

select teacher_id,count(class_id) from teacher_gives_class group by teacher_id;

--- Bring Student's report card:

select
T.names  + ' ' + T.lastnames as "Teacher Name",
class.Class_name as Class,
student_class.academic_grade as "Academic Grade",
student_class.teamwork_grade as "Teamwork Grade",
student_class.communication_grade as "Communication Skills Grade"
from [dbo].[STUDENT_HAS_CLASS] student_class 
join [dbo].[CLASS] class on (student_class.class_id = class.class_id)
join [dbo].[TEACHER_GIVES_CLASS] teacher_class on (teacher_class.class_id = student_class.class_id)
join [dbo].[TEACHERS] T ON (T.TEACHER_ID = teacher_class.teacher_id)